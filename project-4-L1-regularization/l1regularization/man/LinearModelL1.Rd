% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/l1regularization.R
\name{LinearModelL1}
\alias{LinearModelL1}
\title{LinearModelL1}
\usage{
LinearModelL1(X.scaled.mat, y.vec, penalty, opt.thresh, initial.weight.vec,
  step.size)
}
\arguments{
\item{X.scaled.mat}{scaled feature matrix (n_observations x n_features)}

\item{y.vec}{label vector (n_observations x 1)}

\item{penalty}{non-negative numeric scalar}

\item{opt.thresh}{positive numeric scalar, threshold on the sub-differential optimality criterion}

\item{initial.weight.vec}{weight vector (n_observations x 1)}

\item{step.size}{int scalar > 1}
}
\value{
w.opt optimal weight vector (n_observations+1 x 1)
}
\description{
R function that calculates the L1 Regularization
}
\examples{
data(zip.train, package = "ElemStatLearn")
all.y.vec <- zip.train[,1]
is.01<- all.y.vec \%in\% c(0,1)
y.vec <- all.y.vec[is.01]
X.mat <- zip.train[is.01, -1]
n.folds <- 5
fold.vec <- sample(rep(1:n.folds, l=nrow(X.mat)))
validation.fold <- 1
is.train <- fold.vec != validation.fold
is.validation <- fold.vec == validation.fold
X.train <- X.mat[is.train,]
y.train <- y.vec[is.train]
X.scaled.mat <- scale(X.train)
X.filtered <- X.scaled.mat[, attr(X.scaled.mat, "scaled:scale") != 0]
opt.thresh <- 0.01
initial.weight.vec <- rep( 0, l=ncol(X.filtered) +1)
step.size <- 0.1
penalty <- 1
weight.vec <- LinearModelL1( X.filtered, y.train, penalty, opt.thresh, initial.weight.vec, step.size )
}
